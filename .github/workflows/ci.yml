name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  DATABASE_URL: postgresql://todo_user:todo_password@postgres:5432/todo_db?schema=public

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: todo_db
          POSTGRES_USER: todo_user
          POSTGRES_PASSWORD: todo_password
        options: >-
          --health-cmd "pg_isready -U todo_user -d todo_db"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Wait for Postgres
        run: |
          for i in {1..20}; do
            if npx prisma db execute --url "$DATABASE_URL" --command "SELECT 1;" >/dev/null 2>&1; then
              echo "Postgres está pronto."
              exit 0
            fi
            echo "Aguardando Postgres ($i/20)..."
            sleep 3
          done
          echo "Postgres não respondeu a tempo."
          exit 1

      - name: Run migrations
        run: npm run prisma:deploy

      - name: Lint
        run: npm run lint

      - name: Formatting check
        run: npm run format

      - name: Unit tests (coverage)
        run: npm run test:cov

      - name: E2E tests
        run: npm run test:e2e

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Build
        run: npm run build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: todo-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Smoke test container
        run: |
          docker run --rm todo-api:latest node -v
          docker run --rm todo-api:latest npm -v
